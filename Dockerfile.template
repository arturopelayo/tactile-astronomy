FROM resin/%%RESIN_MACHINE_NAME%%-python:2.7

#switch on systemd init system in container
ENV INITSYSTEM on

#install requirements
RUN apt-get update \
    && apt-get install -y -q libtool build-essential --no-install-recommends \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

## Install MRAA and UPM
    RUN apt-get update && \
        apt-get install -q -y \
          build-essential \
          automake \
          cmake \
          git \
          byacc \
          libpcre++-dev \
        && apt-get clean && rm -rf /var/lib/apt/lists/*

    # Can use tag or commit hash to set SWIGERSION
    ENV SWIGVERSION rel-3.0.10
    RUN git clone https://github.com/swig/swig.git && \
        cd swig && \
        git checkout -b build ${SWIGVERSION} && \
        ./autogen.sh && \
        ./configure && \
        make && \
        make install && \
        cd .. && rm -rf swig

    # Can use tag or commit hash to set MRAAVERSION
    ENV MRAAVERSION v1.5.1
    RUN git clone https://github.com/intel-iot-devkit/mraa.git && \
        cd mraa && \
        git checkout -b build ${MRAACOMMIT} && \
        mkdir build && \
        cd build && \
        cmake .. -DSWIG_DIR=`swig -swiglib` \
          -DBUILDSWIGPYTHON=ON -DBUILDSWIGNODE=OFF -DBUILDSWIGJAVA=OFF && \
        make && \
        make install && \
        cd ../.. && rm -rf mraa

    # Can use tag or commit hash to set UPMVERSION
    # PATCHED FOR BUG IN GCC 4.9.2
    # THIS TAKES WAY TOO LONG TO BUILD - DISABLED UNTIL WE NEED IT
    # ENV UPMVERSION v1.0.2
    # RUN git clone https://github.com/intel-iot-devkit/upm.git && \
    #     cd upm && \
    #     git checkout -b build ${UPMCOMMIT} && \
    #     sed -i -e 's/-march=native/-march=armv7/g' CMakeLists.txt &&  \
    #     mkdir build && \
    #     cd build && \
    #     cmake .. -DSWIG_DIR=`swig -swiglib` \
    #       -DBUILDSWIGPYTHON=ON -DBUILDSWIGNODE=OFF -DBUILDSWIGJAVA=OFF && \
    #     make && \
    #     make install && \
    #     cd ../.. && rm -rf upm

# Local SSH server PLEAAASE
RUN apt-get update \
    && apt-get install -y -q openssh-server --no-install-recommends \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# here we set up the config for openSSH.
RUN mkdir /var/run/sshd \
    && echo 'root:resin' | chpasswd \
    && sed -i 's/PermitRootLogin without-password/PermitRootLogin yes/' /etc/ssh/sshd_config \
&& sed -i 's/UsePAM yes/UsePAM no/' /etc/ssh/sshd_config

# Required for sound
RUN apt-get update \
    && apt-get install -y -q libusb-dev --no-install-recommends \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Build libnfc
RUN git clone https://github.com/nfc-tools/libnfc.git && \
    cd libnfc && \
    autoreconf -vis && \
    ./configure --prefix=/usr --sysconfdir=/etc && \
    make && \
    make install && \
    cd ../ && rm -rf libnfc

# Required for sound
RUN apt-get update \
    && apt-get install -y -q alsa-utils libasound2-dev libsndfile1-dev --no-install-recommends \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Required for bluez-alsa
RUN apt-get update \
    && apt-get install -y -q libbsd-dev libsbc-dev libortp-dev bluez libbluetooth-dev --no-install-recommends \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# BLUEZ-ALSA
RUN git clone https://github.com/Arkq/bluez-alsa.git && \
    cd bluez-alsa && \
    autoreconf --install && \
    mkdir build && cd build && \
    ../configure --enable-debug && \
    make && \
    make install && \
    cd ../ && rm -rf bluez-alsa

# pip install python deps from requirements.txt
# For caching until requirements.txt changes
COPY ./requirements.txt /requirements.txt
RUN pip install -r /requirements.txt

# configuration
COPY ./configs/libnfc_pn532_i2c.conf /etc/nfc/devices.d/pn532_i2c.conf

COPY . /usr/src/app
WORKDIR /usr/src/app

CMD ["bash","start.sh"]
